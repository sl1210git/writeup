Creating a Spring Boot application to load Drools rules from a PostgreSQL database and expose processed data as REST APIs involves several steps. Below, I'll provide you with a step-by-step guide on how to achieve this:

**Step 1: Set Up Gradle Project**
Create a new Gradle project for your Spring Boot application. You can use Spring Initializer (https://start.spring.io/) or set up the project manually. Make sure to include the necessary dependencies, including Spring Web, Spring Data JPA, and Drools.

**build.gradle:**
```groovy
plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.drools:drools-core:7.55.0.Final'
    implementation 'org.postgresql:postgresql:42.2.22'

    // Add other dependencies as needed
}

application {
    mainClassName = 'com.example.YourApplicationName'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
```

**Step 2: Create Database Configuration**
Configure your PostgreSQL database connection in the `application.properties` or `application.yml` file.

**application.properties:**
```properties
spring.datasource.url=jdbc:postgresql://localhost:5432/your-database
spring.datasource.username=your-username
spring.datasource.password=your-password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
```

**Step 3: Define Drools Rule Entity**
Create an entity class to represent Drools rules stored in the database.

```java
@Entity
public class DroolsRule {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String ruleName;
    private String ruleContent;

    // Getters and setters
}
```

**Step 4: Create a Drools Rule Repository**
Create a repository interface to interact with the Drools rules stored in the PostgreSQL database.

```java
public interface DroolsRuleRepository extends JpaRepository<DroolsRule, Long> {

    Optional<DroolsRule> findByRuleName(String ruleName);
}
```

**Step 5: Create a Drools Configuration Bean**
Configure the Drools session and runtime.

```java
@Configuration
public class DroolsConfiguration {

    @Autowired
    private DroolsRuleRepository droolsRuleRepository;

    @Bean
    public KieContainer kieContainer() {
        KieServices kieServices = KieServices.Factory.get();
        KieFileSystem kieFileSystem = kieServices.newKieFileSystem();

        List<DroolsRule> rules = droolsRuleRepository.findAll();
        for (DroolsRule rule : rules) {
            kieFileSystem.write(ResourceFactory.newByteArrayResource(rule.getRuleContent().getBytes()));
        }

        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem);
        kieBuilder.buildAll();

        KieContainer kieContainer = kieServices.newKieContainer(kieServices.getRepository().getDefaultReleaseId());

        return kieContainer;
    }

    @Bean
    public KieSession kieSession() {
        return kieContainer().newKieSession();
    }
}
```

**Step 6: Create a Data Processing Service**
Create a service that processes data using Drools rules and expose it as REST APIs.

```java
@Service
public class DataProcessingService {

    @Autowired
    private KieSession kieSession;

    public ProcessedData process(List<DataObject> dataObjects) {
        ProcessedData processedData = new ProcessedData();
        
        for (DataObject dataObject : dataObjects) {
            kieSession.insert(dataObject);
        }

        int rulesFired = kieSession.fireAllRules();

        // Implement your data processing logic here
        
        kieSession.dispose();

        return processedData;
    }
}
```

**Step 7: Create REST Controllers**
Create REST controllers to expose the processed data as REST APIs.

```java
@RestController
@RequestMapping("/api")
public class DataProcessingController {

    @Autowired
    private DataProcessingService dataProcessingService;

    @PostMapping("/process-data")
    public ResponseEntity<ProcessedData> processData(@RequestBody List<DataObject> dataObjects) {
        ProcessedData processedData = dataProcessingService.process(dataObjects);
        return ResponseEntity.ok(processedData);
    }
}
```

**Step 8: Run the Application**
Run your Spring Boot application using `./gradlew bootRun` and access the REST APIs at `http://localhost:8080/api/process-data`.

Sure, let's add some sample Drools rules to the Spring Boot application. These rules will demonstrate how to define simple conditions and actions for data processing.

First, you should create a table in your PostgreSQL database to store the Drools rules. You can use the following SQL command:

```sql
CREATE TABLE drools_rule (
    id SERIAL PRIMARY KEY,
    rule_name VARCHAR(255) NOT NULL,
    rule_content TEXT NOT NULL
);
```

Next, insert some sample rules into the `drools_rule` table:

```sql
INSERT INTO drools_rule (rule_name, rule_content) VALUES
    ('Rule1', 'rule "Rule1" when $data: DataObject(value < 50) then $data.setProcessed(true); end'),
    ('Rule2', 'rule "Rule2" when $data: DataObject(value >= 50 && value < 100) then $data.setProcessed(true); end'),
    ('Rule3', 'rule "Rule3" when $data: DataObject(value >= 100) then $data.setProcessed(true); end');
```

Now, let's update the Spring Boot application to load and execute these sample Drools rules:

```java
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.rule.FactHandle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class DataProcessingService {

    @Autowired
    private KieSession kieSession;

    @Autowired
    private DataObjectRepository dataObjectRepository;

    public ProcessedData process(List<DataObject> dataObjects) {
        ProcessedData processedData = new ProcessedData();
        List<DataObject> processedObjects = new ArrayList<>();

        for (DataObject dataObject : dataObjects) {
            FactHandle factHandle = kieSession.insert(dataObject);
            kieSession.fireAllRules();
            kieSession.delete(factHandle); // Remove the inserted fact

            if (dataObject.isProcessed()) {
                processedObjects.add(dataObject);
            }
        }

        processedData.setProcessedObjects(processedObjects);

        return processedData;
    }
}
```

With these updated rules and service code, your Spring Boot application will now process the `DataObject` instances based on the sample Drools rules loaded from the PostgreSQL database. If a `DataObject` meets the conditions defined in any of the rules, it will be marked as "processed."

Make sure your `DataObject` class has a `boolean processed` field and appropriate getters and setters. Also, update the `ProcessedData` class to hold the list of processed objects.

Now, when you send a list of `DataObject` instances to the `/api/process-data` endpoint, the application will execute the Drools rules and return the processed data as a response.

